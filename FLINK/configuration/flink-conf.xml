<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<configuration supports_adding_forbidden="true">
    <property>
        <name>flink_download_url</name>
        <value>DOWNLOAD_PROM_REPO</value>
        <display-name>Flink download URL</display-name>
        <description>Flink download URL. Flink will be downloaded from repository URL if this config is left unchanged.</description>
    </property>

    <property>
        <name>flink_group</name>
        <value>flink</value>
        <display-name>Flink Group</display-name>
        <description>Flink group</description>
    </property>

    <property>
        <name>flink_user</name>
        <value>flink</value>
        <display-name>Flink User</display-name>
        <description>Flink user</description>
    </property>

<!--  Common  -->

    <property>
        <name>jobmanager_rpc_address</name>
        <value>localhost</value>
        <display-name>jobmanager.rpc.address</display-name>
        <description>The config parameter defining the network address to connect to for communication with the job manager. This value is only interpreted in setups where a single JobManager with static name or address exists (simple standalone setups, or container setups with dynamic service name resolution). It is not used in many high-availability setups, when a leader-election service (like ZooKeeper) is used to elect and discover the JobManager leader from potentially multiple standby JobManagers.</description>
    </property>

    <property>
        <name>jobmanager_rpc_port</name>
        <value>6123</value>
        <display-name>jobmanager.rpc.port</display-name>
        <description>The config parameter defining the network port to connect to for communication with the job manager. Like jobmanager.rpc.address, this value is only interpreted in setups where a single JobManager with static name/address and port exists (simple standalone setups, or container setups with dynamic service name resolution). This config option is not used in many high-availability setups, when a leader-election service (like ZooKeeper) is used to elect and discover the JobManager leader from potentially multiple standby JobManagers.</description>
    </property>

    <property>
        <name>jobmanager_memory_process_size</name>
        <value>1600</value>
        <display-name>jobmanager.memory.process.size</display-name>
        <description>The total process memory size for the JobManager.</description>
        <value-attributes>
            <type>int</type>
            <minimum>0</minimum>
            <maximum>32768</maximum>
            <unit>MB</unit>
            <increment-step>256</increment-step>
            <overridable>false</overridable>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>taskmanager_memory_process_size</name>
        <value>1728</value>
        <display-name>taskmanager.memory.process.size</display-name>
        <description>The total process memory size for the TaskManager.</description>
        <value-attributes>
            <type>int</type>
            <minimum>0</minimum>
            <maximum>32768</maximum>
            <unit>MB</unit>
            <increment-step>256</increment-step>
            <overridable>false</overridable>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>taskmanager_numberOfTaskSlots</name>
        <value>1</value>
        <display-name>taskmanager.numberOfTaskSlots</display-name>
        <description>The number of task slots that each TaskManager offers. Each slot runs one parallel pipeline.</description>
        <value-attributes>
            <type>int</type>
            <minimum>0</minimum>
            <maximum>1024</maximum>
            <increment-step>1</increment-step>
            <overridable>false</overridable>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>parallelism_default</name>
        <value>1</value>
        <display-name>parallelism.default</display-name>
        <description>The parallelism used for programs that did not specify and other parallelism.</description>
        <value-attributes>
            <type>int</type>
            <minimum>0</minimum>
            <maximum>1024</maximum>
            <increment-step>1</increment-step>
            <overridable>false</overridable>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <property>
        <name>fs_default_scheme</name>
        <value>none</value>
        <display-name>fs.default-scheme</display-name>
        <description>The default filesystem scheme, used for paths that do not declare a scheme explicitly. May contain an authority, e.g. host:port in case of a HDFS NameNode.</description>
    </property>

<!--  High Availability  -->

    <property>
        <name>high_availability_type</name>
        <value>NONE</value>
        <display-name>high-availability.type</display-name>
        <description>Defines high-availability mode used for the cluster execution. To enable high-availability, set this mode to "ZOOKEEPER" or specify FQN of factory class.</description>
    </property>
    <property>
        <name>high_availability_storageDir</name>
        <value>none</value>
        <display-name>high-availability.storageDir</display-name>
        <description>File system path (URI) where Flink persists metadata in high-availability setups.</description>
    </property>

    <property>
        <name>high_availability_zookeeper_quorum</name>
        <value>none</value>
        <display-name>high-availability.zookeeper.quorum</display-name>
        <description>The ZooKeeper quorum to use, when running Flink in a high-availability mode with ZooKeeper.</description>
    </property>

    <property>
        <name>high_availability_zookeeper_client_acl</name>
        <value>open</value>
        <display-name>high-availability.zookeeper.client.acl</display-name>
        <description>Defines the ACL (open|creator) to be configured on ZK node. The configuration value can be set to “creator” if the ZooKeeper server configuration has the “authProvider” property mapped to use SASLAuthenticationProvider and the cluster is configured to run in secure mode (Kerberos).</description>
    </property>

    <property>
        <name>zookeeper_sasl_disable</name>
        <value>true</value>
        <display-name>zookeeper.sasl.disable</display-name>
        <description>Whether use SASL to connect to a secured ZooKeeper quorum or not.</description>
    </property>

<!--  Fault tolerance and checkpointing  -->

    <property>
        <name>execution_checkpointing_interval</name>
        <value>none</value>
        <display-name>execution.checkpointing.interval</display-name>
        <description>Gets the interval in which checkpoints are periodically scheduled.</description>
    </property>

    <property>
        <name>state_backend_type</name>
        <value>none</value>
        <display-name>state.backend.type</display-name>
        <description>The state backend to be used to store and checkpoint state. Supported backends are 'hashmap', 'rocksdb', or the &lt;class-name-of-factory&gt;.</description>
    </property>

    <property>
        <name>state_checkpoints_dir</name>
        <value>none</value>
        <display-name>state.checkpoints.dir</display-name>
        <description>The default directory used for storing the data files and meta data of checkpoints in a Flink supported filesystem. The storage path must be accessible from all participating processes/nodes(i.e. all TaskManagers and JobManagers).</description>
    </property>
    <property>
        <name>state_savepoints_dir</name>
        <value>none</value>
        <display-name>state.savepoints.dir</display-name>
        <description>The default directory for savepoints. Used by the state backends that write savepoints to file systems (MemoryStateBackend, FsStateBackend, RocksDBStateBackend).</description>
    </property>

    <property>
        <name>state_backend_incremental</name>
        <value>false</value>
        <display-name>state.backend.incremental</display-name>
        <description>Option whether the state backend should create incremental checkpoints, if possible. For an incremental checkpoint, only a diff from the previous checkpoint is stored, rather than the complete checkpoint state. Some state backends may not support incremental checkpoints and ignore this option.</description>
    </property>

    <property>
        <name>jobmanager_execution_failover_strategy</name>
        <value>region</value>
        <display-name>jobmanager.execution.failover-strategy</display-name>
        <description>The failover strategy, i.e., how the job computation recovers from task failures.</description>
    </property>

<!--  Rest & web frontend  -->

    <property>
        <name>rest_port</name>
        <value>8081</value>
        <display-name>rest.port</display-name>
        <description>The port that the client connects to. If rest.bind-port has not been specified, then the REST server will bind to this port.</description>
    </property>

    <property>
        <name>rest_address</name>
        <value>none</value>
        <display-name>rest.address</display-name>
        <description>The address that should be used by clients to connect to the server.</description>
    </property>

    <property>
        <name>rest_bind_port</name>
        <value>none</value>
        <display-name>rest.bind-port</display-name>
        <description>The port that the server binds itself. Accepts a list of ports (“50100,50101”), ranges (“50100-50200”) or a combination of both. It is recommended to set a range of ports to avoid collisions when multiple Rest servers are running on the same machine.</description>
    </property>

    <property>
        <name>rest_bind_address</name>
        <value>none</value>
        <display-name>rest.bind-address</display-name>
        <description>The address that the server binds itself.</description>
    </property>

    <property>
        <name>web_submit_enable</name>
        <value>true</value>
        <display-name>web.submit.enable</display-name>
        <description>Flag indicating whether jobs can be uploaded and run from the web-frontend.</description>
    </property>

<!--  Advanced  -->

    <property>
        <name>io_tmp_dirs</name>
        <value>/tmp</value>
        <display-name>io.tmp.dirs</display-name>
        <description>Directories for temporary files, separated by",", "|", or the system's java.io.File.pathSeparator.</description>
    </property>

    <property>
        <name>classloader_resolve_order</name>
        <value>child-first</value>
        <display-name>classloader.resolve-order</display-name>
        <description>Defines the class resolution strategy when loading classes from user code, meaning whether to first check the user code jar ("child-first") or the application classpath ("parent-first"). The default settings indicate to load classes first from the user code jar, which means that user code jars can include and load different dependencies than Flink uses (transitively).</description>
    </property>

    <property>
        <name>taskmanager_memory_network_fraction</name>
        <value>0.1</value>
        <display-name>taskmanager.memory.network.fraction</display-name>
        <description>Fraction of JVM memory to use for network buffers. This determines how many streaming data exchange channels a TaskManager can have at the same time and how well buffered the channels are. If a job is rejected or you get a warning that the system has not enough buffers available, increase this value or the min/max values below. Also note, that "taskmanager.network.memory.min"` and "taskmanager.network.memory.max" may override this fraction.</description>
    </property>

    <property>
        <name>taskmanager_memory_network_min</name>
        <value>64mb</value>
        <display-name>taskmanager.memory.network.min</display-name>
        <description>Minimum memory size for network buffers.</description>
    </property>

    <property>
        <name>taskmanager_memory_network_max</name>
        <value>1gb</value>
        <display-name>taskmanager.memory.network.max</display-name>
        <description>Maximum memory size for network buffers.</description>
    </property>

<!--  Flink Cluster Security Configuration  -->

    <property>
        <name>security_kerberos_login_contexts</name>
        <value>none</value>
        <display-name>security.kerberos.login.contexts</display-name>
        <description>A comma-separated list of login contexts to provide the Kerberos credentials to (for example, `Client,KafkaClient` to use the credentials for ZooKeeper authentication and for Kafka authentication)</description>
    </property>

    <property>
        <name>security_kerberos_login_use_ticket_cache</name>
        <value>true</value>
        <display-name>security.kerberos.login.use-ticket-cache</display-name>
        <description>Indicates whether to read from your Kerberos ticket cache.</description>
    </property>

    <property>
        <name>security_kerberos_login_keytab</name>
        <value>none</value>
        <display-name>security.kerberos.login.keytab</display-name>
        <description>Absolute path to a Kerberos keytab file that contains the user credentials.</description>
    </property>

    <property>
        <name>security_kerberos_login_principal</name>
        <value>none</value>
        <display-name>security.kerberos.login.principal</display-name>
        <description>Kerberos principal name associated with the keytab.</description>
    </property>

    <property>
        <name>zookeeper_sasl_service_name</name>
        <value>none</value>
        <display-name>zookeeper.sasl.service-name</display-name>
        <description>Override below configuration to provide custom ZK service name if configured.</description>
    </property>

    <property>
        <name>zookeeper_sasl_login_context_name</name>
        <value>none</value>
        <display-name>zookeeper.sasl.login-context-name</display-name>
        <description>The configuration below must match one of the values set in "security.kerberos.login.contexts".</description>
    </property>

<!--  History server  -->

    <property>
        <name>jobmanager_archive_fs_dir</name>
        <value>none</value>
        <display-name>jobmanager.archive.fs.dir</display-name>
        <description>Dictionary for JobManager to store the archives of completed jobs.</description>
    </property>

    <property>
        <name>historyserver_web_address</name>
        <value>none</value>
        <display-name>historyserver.web.address</display-name>
        <description>Address of the HistoryServer's web interface.</description>
    </property>

    <property>
        <name>historyserver_web_port</name>
        <value>8082</value>
        <display-name>historyserver.web.port</display-name>
        <description>Port of the HistoryServers's web interface.</description>
    </property>

    <property>
        <name>historyserver_archive_fs_dir</name>
        <value>none</value>
        <display-name>historyserver.archive.fs.dir</display-name>
        <description>Comma separated list of directories to fetch archived jobs from. The history server will monitor these directories for archived jobs. You can configure the JobManager to archive jobs to a directory via `jobmanager.archive.fs.dir`.</description>
    </property>

    <property>
        <name>historyserver_archive_fs_refresh_interval</name>
        <value>10000</value>
        <display-name>historyserver.archive.fs.refresh-interval</display-name>
        <description>The refresh interval for the HistoryServer web-frontend in milliseconds.</description>
        <value-attributes>
            <type>int</type>
            <minimum>0</minimum>
            <increment-step>1</increment-step>
            <overridable>false</overridable>
        </value-attributes>
    </property>

    <property>
        <name>classloader_check_leaked_classloader</name>
        <value>false</value>
        <display-name>classloader.check-leaked-classloader</display-name>
        <description>Fails attempts at loading classes if the user classloader of a job is used after it has terminated. This is usually caused by the classloader being leaked by lingering threads or misbehaving libraries, which may also result in the classloader being used by other jobs. This check should only be disabled if such a leak prevents further jobs from running.</description>
    </property>

    <property>
        <name>custom_properties</name>
        <value>
# This is the place for your custom properties.
# e.g.
# your_key: your_value
        </value>
        <display-name>Custom properties</display-name>
        <description>The place for your custom properties</description>
        <value-attributes>
            <type>content</type>
        </value-attributes>
    </property>
</configuration>